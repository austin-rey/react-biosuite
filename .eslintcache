[{"C:\\Users\\austi\\Desktop\\biosuite\\src\\index.js":"1","C:\\Users\\austi\\Desktop\\biosuite\\src\\App.js":"2","C:\\Users\\austi\\Desktop\\biosuite\\src\\reportWebVitals.js":"3","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Navigation.js":"4","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Landing.js":"5","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Search.js":"6","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Species.js":"7","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Publisher.js":"8","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Occurrence.js":"9","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Dashboard.js":"10","C:\\Users\\austi\\Desktop\\biosuite\\src\\api\\gbif.js":"11","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\MapboxGLMap.js":"12","C:\\Users\\austi\\Desktop\\biosuite\\src\\hooks\\useFetchSpecies.js":"13","C:\\Users\\austi\\Desktop\\biosuite\\src\\hooks\\useFetchSearch.js":"14","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Footer.js":"15","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Loading.js":"16","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Pagination.js":"17","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\ImageCard.js":"18","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\PageHeader.js":"19","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\NameCard.js":"20","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\SectionHeader.js":"21","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\ResultCard.js":"22","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\ClassificationCard.js":"23"},{"size":266,"mtime":1609876553483,"results":"24","hashOfConfig":"25"},{"size":3531,"mtime":1611248179588,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1606495291126,"results":"27","hashOfConfig":"25"},{"size":1644,"mtime":1611082527464,"results":"28","hashOfConfig":"25"},{"size":3474,"mtime":1610648617484,"results":"29","hashOfConfig":"25"},{"size":10675,"mtime":1611248255968,"results":"30","hashOfConfig":"25"},{"size":14816,"mtime":1611246626382,"results":"31","hashOfConfig":"25"},{"size":247,"mtime":1609963218080,"results":"32","hashOfConfig":"25"},{"size":4103,"mtime":1611179885876,"results":"33","hashOfConfig":"25"},{"size":1397,"mtime":1611248122362,"results":"34","hashOfConfig":"25"},{"size":105,"mtime":1609966573981,"results":"35","hashOfConfig":"25"},{"size":1354,"mtime":1610579977329,"results":"36","hashOfConfig":"25"},{"size":2151,"mtime":1611162337437,"results":"37","hashOfConfig":"25"},{"size":1779,"mtime":1611185671886,"results":"38","hashOfConfig":"25"},{"size":547,"mtime":1610647938047,"results":"39","hashOfConfig":"25"},{"size":712,"mtime":1611080989892,"results":"40","hashOfConfig":"25"},{"size":355,"mtime":1611182672004,"results":"41","hashOfConfig":"25"},{"size":1914,"mtime":1611180887237,"results":"42","hashOfConfig":"25"},{"size":1569,"mtime":1611245799105,"results":"43","hashOfConfig":"25"},{"size":1436,"mtime":1611182482520,"results":"44","hashOfConfig":"25"},{"size":478,"mtime":1611183453630,"results":"45","hashOfConfig":"25"},{"size":3398,"mtime":1611247969485,"results":"46","hashOfConfig":"25"},{"size":836,"mtime":1611246667913,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1od3epr",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},"C:\\Users\\austi\\Desktop\\biosuite\\src\\index.js",[],["103","104"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\App.js",["105"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\reportWebVitals.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Navigation.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Landing.js",["106"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Container, Grid, Button, Paper } from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.brown.light,\r\n    },\r\n    showcase: {\r\n       minHeight: '400px',\r\n       marginBottom: '10px'\r\n    },\r\n    headerBG: {\r\n        backgroundColor: theme.palette.brown.main,\r\n    },\r\n    contentHeader: {\r\n        padding: '20px 40px'\r\n    },\r\n    contentBody: {\r\n        padding: '20px 60px',\r\n        backgroundColor: theme.palette.brown.light,\r\n    }\r\n}));\r\n\r\nconst Landing = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n             <div className={classes.headerBG}>\r\n                <Container maxWidth=\"xl\" >\r\n                    <Grid container direction=\"column\" className={classes.contentHeader}>\r\n                        <h1>BIOSUITE</h1>\r\n                        <p>An application for <b>researchers, students and professionals</b> to explore published data on all living organisms across the world. Our data is sourced from GBIF (Global Biodiversity Information Facility), a data infrastructure whos purpose is to provide anyone, anywhere, open access to data about all types of life on Earth. Below you can see what kind of information is contained in this application and how it can be accessed.</p>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n            <Container maxWidth=\"xl\">\r\n                <Grid container direction=\"column\" className={classes.contentBody}>\r\n                    <Grid item>\r\n                        <h2>Species Data</h2>\r\n                        <p>Biosuite provides a search tool to access recorded species and explore associated occurrences and datasets per each result. We categorize information along taxonomic, geographic, and thematic lines, or some combination of the three.</p>\r\n                        <Paper elevation={0} className={classes.showcase}></Paper>\r\n                        <Button variant=\"contained\" color=\"primary\" disableElevation>explore species</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <h2>Occurrence Data</h2>\r\n                        <p>Most of the data accessible on this website includes recorded occurrences, which can be general locality information or precise coordinates in which the species was observed.</p>\r\n                        <Paper elevation={0} className={classes.showcase}></Paper>\r\n                        <Button variant=\"contained\" color=\"primary\" disableElevation>explore occurrences</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <h2>Creditable Publishers</h2>\r\n                        <p>The data for this website is published by credible organizations who maintain datasets on species which follow imposed standards outlined by GBIF. We provide a robust searching tool that allows you to explore species recorded in each of these datasets.</p>\r\n                        <Paper elevation={0} className={classes.showcase}></Paper>\r\n                        <Button variant=\"contained\" color=\"primary\" disableElevation>explore publishers</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nLanding.propTypes = {\r\n\r\n}\r\n\r\nexport default Landing\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Search.js",["107","108","109","110","111","112","113","114","115"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Species.js",["116","117","118","119","120","121","122","123","124","125","126","127","128"],"import React, {useEffect,useState} from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {Link,useParams} from \"react-router-dom\";\r\n\r\nimport Moment from 'react-moment';\r\n\r\nimport {useFetchSpecies} from '../hooks/useFetchSpecies'\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport { Grid,Paper,Divider,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Typography } from '@material-ui/core';\r\n\r\nimport Dashboard from '../components/Dashboard'\r\nimport Loading from '../components/Loading'\r\nimport MapboxGLMap from '../components/MapboxGLMap'\r\nimport PaginationControlled from '../components/Pagination'\r\nimport ImageCard from '../components/ImageCard'\r\nimport PageHeader from '../components/PageHeader'\r\nimport SectionHeader from '../components/SectionHeader'\r\nimport NameCard from '../components/NameCard'\r\nimport SidebarCard from '../components/ClassificationCard'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    results: {\r\n        padding: '40px',\r\n        flexGrow: 1,\r\n        height: '100%',\r\n    },\r\n    section: {\r\n        marginBottom: '20px'\r\n    },\r\n    pagination: {\r\n        padding: '10px'\r\n    },\r\n    cardContainer: {\r\n        padding: '10px'\r\n    },\r\n    mapContainer: {\r\n        minWidth: '400px',\r\n        minHeight: '400px',\r\n    },\r\n    sidebarContainer: {\r\n        backgroundColor: '#fff',\r\n        border: '1px solid #F0E9E1',\r\n        borderRadius: '5px',\r\n        margin: '10px 0px',\r\n        padding: '10px'\r\n    },\r\n    link: {\r\n        color: \"#fff\",\r\n        textDecoration: 'none'\r\n    }\r\n}));\r\n\r\nconst OccurrenceTable = ({occurrences}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Paper elevation={0}>\r\n            <TableContainer>\r\n                <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\"><Typography variant=\"h6\">Scientific Name</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"h6\">Rank</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"h6\">Record Date</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"h6\">Country</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"h6\">Basis of Record</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"h6\">Source</Typography></TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {occurrences.results.map((result) => (\r\n                    <TableRow key={result.key}>\r\n                        <TableCell align=\"center\"><Typography variant=\"body2\"><b>{(result.acceptedScientificName)?result.acceptedScientificName:\"No record\"}</b></Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"body2\">{(result.taxonRank)?result.taxonRank:\"No record\"}</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"body2\">{(result.eventDate)?<Moment format=\"MMM DD, YYYY\">{result.eventDate}</Moment>:\"No record\"}</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"body2\">{(result.country)?result.country:\"No record\"}</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"body2\">{(result.basisOfRecord)?result.basisOfRecord:\"No record\"}</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography variant=\"body2\">{(result.datasetName)?result.datasetName:\"No record\"}</Typography></TableCell>\r\n                    </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    )\r\n}\r\n\r\n// Right side of the dashboard\r\nconst MainContent = ({data,imagePageChange,occurrencePageChange,imagePaginationOptions,occurrencePaginationOptions}) => {\r\n    const classes = useStyles();\r\n    const {metadata,occurrenceImages,occurrences,speciesVernacularNames,speciesSynonyms} = data;\r\n\r\n    const HeadingBody = () => {\r\n        return (\r\n            <Grid container direction=\"row\" spacing={2} justify=\"space-between\" alignItems=\"center\">\r\n                <Grid item>\r\n                    <Typography variant=\"h6\">English Common Name: <b>{metadata.vernacularName}</b></Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography variant=\"h6\">{occurrences.count} occurrences found</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <PageHeader heading={metadata.scientificName} HeadingBody={HeadingBody}/>\r\n            <Grid item className={classes.results}>\r\n                <Grid container direction=\"column\" wrap=\"nowrap\">\r\n                    <Grid item className={classes.section}>\r\n                        <SectionHeader heading=\"Published Images\" subtext=\"Note: Click image for larger view.\"/>\r\n                        <Paper elevation={0}>\r\n                            <Grid container direction=\"column\">\r\n                                <Grid item>\r\n                                    <Grid container direction=\"row\" spacing={2} className={classes.cardContainer}>\r\n                                        {occurrenceImages.results?.map((image,i) => (\r\n                                            <Grid item key={i}>\r\n                                                <ImageCard image={image.media[0].identifier} title={image.acceptedScientificName} created={image.media[0].created} link={'/'}/>\r\n                                            </Grid>\r\n                                        ))}   \r\n                                    </Grid>\r\n                                    <Divider/>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" className={classes.pagination}>\r\n                                        <Grid item> \r\n                                            <PaginationControlled currentPage={imagePaginationOptions.page+1} totalPages={Math.ceil(occurrenceImages.count/imagePaginationOptions.limit)} onChange={imagePageChange} />\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography variant=\"body1\">{occurrenceImages.count} results</Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={classes.section}>\r\n                        <SectionHeader heading=\"Geolocation Records\" subtext=\"Occurrences of this species with recorded location data.\"/>\r\n                        <Paper elevation={0} className={classes.mapContainer}>\r\n                            {/* <MapboxGLMap taxonKey={metadata.key} width={1024} height={400}/> */}\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={classes.section}>\r\n                        <SectionHeader heading=\"Recorded Occurrences\" subtext=\"Click the name to view additional information per occurrence.\"/>\r\n                        <Paper elevation={0}>\r\n                            <Grid container direction=\"column\">\r\n                                <Grid item>\r\n                                    <OccurrenceTable occurrences={occurrences}/>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" className={classes.pagination}>\r\n                                        <Grid item> \r\n                                            <PaginationControlled currentPage={occurrencePaginationOptions.page+1} totalPages={Math.ceil(occurrences.count/occurrencePaginationOptions.limit)} onChange={occurrencePageChange} />\r\n                                        </Grid>\r\n                                        <Grid item><Typography variant=\"body1\">{occurrences.count} results</Typography></Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={classes.section}>\r\n                        <Grid container direction=\"row\" spacing={2} justify=\"flex-start\" wrap=\"nowrap\" alignItems=\"stretch\">\r\n                            <Grid item sm={6} md={6} lg={6} xl={6}>\r\n                                <SectionHeader heading=\"Vernacular Names\" subtext=\"Common Names\"/>\r\n                                <NameCard \r\n                                    leftCol={speciesVernacularNames?.results.map((item)=>{return item.vernacularName})} rightCol={speciesVernacularNames?.results.map((item)=>{return item.source})} \r\n                                    leftLabel={'Name'} \r\n                                    rightLabel={'Source'}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item sm={6} md={6} lg={6} xl={6}>\r\n                                <SectionHeader heading=\"Synonyms\" subtext=\"Related names\"/>\r\n                                <NameCard \r\n                                    leftCol={speciesSynonyms?.results.map((item)=>{return item.scientificName})} \r\n                                    rightCol={speciesSynonyms?.results.map((item)=>{return item.authorship})} \r\n                                    leftLabel={'Name'} \r\n                                    rightLabel={'Author'}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n// Left Side of dashboard\r\nconst Sidebar = ({data}) => {\r\n    const classes = useStyles();\r\n    const {metadata,speciesParent,speciesChildren} = data;\r\n    \r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Grid item>\r\n                <Link to=\"/search/species/\">Back to Search</Link>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">Classification</Typography>\r\n            </Grid>\r\n            <Grid item className={classes.sidebarContainer}>\r\n                <SidebarCard title={'Higher Taxon'} subtext={'Click each to explore the children species.'} list={speciesParent}/>\r\n            </Grid>\r\n            <Grid item className={classes.sidebarContainer}>\r\n               <Typography variant=\"h4\">{metadata.scientificName}</Typography>\r\n               <ul>\r\n                   <li><Typography variant=\"body1\">Rank: {metadata.rank}</Typography></li>\r\n                   <li><Typography variant=\"body1\">Status: {metadata.taxonomicStatus}</Typography></li>\r\n               </ul>\r\n            </Grid>\r\n            <Grid item className={classes.sidebarContainer}>\r\n                <SidebarCard title={'Children'} subtext={'Click each to view more details.'} list={speciesChildren.results}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst Species = props => {\r\n    let { id } = useParams();\r\n\r\n    const { \r\n        isLoading,\r\n        data,\r\n        error,\r\n        execute\r\n    } = useFetchSpecies();\r\n\r\n    // Component state and event handler for species children ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    const [childrenPagination, setChildrenPagination] = useState({page: 0, limit: 100})\r\n    const childrenPageChange = (e,value) => {}\r\n\r\n    // Component state and event handler for vernacular names ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    const [vernacularPagination, setVernacularPagination] = useState({page: 0, limit: 20})\r\n    const vernacularPageChange = (e,value) => {}\r\n\r\n    // Component state and event handler for synonyms ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    const [synonymsPagination, setSynonymsPagination] = useState({page: 0, limit: 20})\r\n    const synonymsPageChange = (e,value) => { }\r\n\r\n    // Component state and event handler for occurrence images ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    const [imagePaginationOptions, setImagePaginationOptions] = useState({page: 0, limit: 8});\r\n    const imagePageChange = (e,value) => {\r\n        setImagePaginationOptions((prevOptions) => ({...prevOptions,page:value-1}));\r\n        execute({\r\n            id,\r\n            imagePaginationOptions,\r\n            occurrencePaginationOptions,\r\n            imagePage: value-1,\r\n            occurrencePage:occurrencePaginationOptions.page\r\n        })\r\n    }\r\n\r\n    // Component state and event handler for occurrences ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    const [occurrencePaginationOptions, setOccurrencePaginationOptions] = useState({page: 0,limit: 10});\r\n    const occurrencePageChange = (e,value) => {\r\n        setOccurrencePaginationOptions((prevOptions) => ({...prevOptions,page:value-1}));\r\n        execute({\r\n            id,\r\n            imagePaginationOptions,\r\n            occurrencePaginationOptions,\r\n            imagePage: imagePaginationOptions.page,\r\n            occurrencePage: value-1\r\n        })\r\n    }\r\n\r\n    // Initial fetching of data for the species page ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    useEffect(() => {\r\n        try {\r\n            execute({\r\n                id,\r\n                imagePaginationOptions,\r\n                occurrencePaginationOptions\r\n            });\r\n        } catch (error) {}\r\n        }, [execute]);\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <Loading/>}\r\n            {data && <Dashboard\r\n                sidebar={\r\n                    <Sidebar \r\n                    data={data}\r\n                    loading={isLoading}\r\n                />\r\n                } \r\n                mainContent={\r\n                    <MainContent \r\n                        imagePageChange={imagePageChange}\r\n                        occurrencePageChange={occurrencePageChange}\r\n                        imagePaginationOptions={imagePaginationOptions}\r\n                        occurrencePaginationOptions={occurrencePaginationOptions}\r\n                        data={data}\r\n                        loading={isLoading}\r\n                    />\r\n                }\r\n            />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Species\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Publisher.js",["129"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Publisher = props => {\r\n    return (\r\n        <div>\r\n            <h1>Publisher Page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nPublisher.propTypes = {\r\n\r\n}\r\n\r\nexport default Publisher\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Occurrence.js",["130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147"],"import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {BrowserRouter as Router,Link,useParams} from \"react-router-dom\";\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport { Grid,Button,Paper,Divider,Card,CardMedia,CardContent,CardActions,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Typography } from '@material-ui/core';\r\n\r\nimport Dashboard from '../components/Dashboard'\r\nimport Loading from '../components/Loading'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    headerBG: {\r\n        backgroundColor: theme.palette.brown.light,\r\n    },//\r\n    headerContainer: {\r\n        padding: '20px 40px',\r\n        maxWidth: '1600px'\r\n    },//\r\n    headerButton: {\r\n        backgroundColor: theme.palette.brown.dark\r\n    },\r\n    viewMoreButton: {\r\n        backgroundColor: theme.palette.green.dark,\r\n        width: '100%'\r\n    },\r\n    resultsHeader: {\r\n        padding: '10px 40px',\r\n        borderBottom: '1px solid #efefef'\r\n    },\r\n    results: {\r\n        padding: '40px',\r\n        flexGrow: 1,\r\n        height: '100%',\r\n    },//\r\n    section: {\r\n        marginBottom: '20px'\r\n    },//\r\n    nameContainer: {\r\n        textAlign: 'center',\r\n        height: '100%'\r\n    },\r\n    card: {\r\n        width: 280,\r\n        boxShadow: 'none',\r\n        textAlign: 'center',\r\n        border: '1px solid #efefef',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        },\r\n    media: {\r\n        height: 200,\r\n    },\r\n    pagination: {\r\n        padding: '10px'\r\n    },\r\n    cardContainer: {\r\n        padding: '10px'\r\n    },\r\n    mapContainer: {\r\n        minWidth: '400px',\r\n        minHeight: '400px',\r\n    },\r\n    sidebarContainer: {\r\n        backgroundColor: '#fff',\r\n        border: '1px solid #F0E9E1',\r\n        borderRadius: '5px',\r\n        margin: '10px 0px',\r\n        padding: '10px'\r\n    },//\r\n    link: {\r\n        color: \"#fff\",\r\n        textDecoration: 'none'\r\n    }\r\n}));\r\n\r\n\r\nconst PageHeader = ({name}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item className={classes.headerBG}>\r\n            <Grid container direction=\"column\" justify=\"space-between\" alignItems=\"stretch\" className={classes.headerContainer}>\r\n                <Grid item>\r\n                    <Typography variant=\"h1\">{name}</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <p>Some Text</p>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nPageHeader.propTypes = {\r\n    name: PropTypes.string,\r\n}\r\n\r\n// Right side of the dashboard\r\nconst MainContent = ({}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <PageHeader name=\"Species Name\"/>\r\n            <Grid item className={classes.results}>\r\n                <Grid container direction=\"column\" wrap=\"nowrap\">\r\n                    <Grid item className={classes.section}>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n// Left Side of dashboard\r\nconst Sidebar = ({}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Grid item>\r\n                <Link to=\"/search/species/\">Back to Search</Link>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">Classification</Typography>\r\n            </Grid>\r\n            <Grid item className={classes.sidebarContainer}>\r\n                <p>Items</p>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nconst Occurrence = props => {\r\n    let { id } = useParams();\r\n\r\n    return (\r\n        <>\r\n            {/* {isLoading && <Loading/>} */}\r\n          <Dashboard\r\n                sidebar={\r\n                    <Sidebar />\r\n                } \r\n                mainContent={\r\n                    <MainContent />\r\n                }\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nOccurrence.propTypes = {\r\n\r\n}\r\n\r\nexport default Occurrence\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Dashboard.js",["148"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\api\\gbif.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\MapboxGLMap.js",["149","150"],"import * as React from 'react';\r\nimport ReactMapboxGl, { Layer, Source,ZoomControl} from \"react-mapbox-gl\";\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst Map = ReactMapboxGl({\r\n    accessToken: process.env.REACT_APP_MAPBOX,\r\n    maxZoom : 1,\r\n    minZoom : 0\r\n  });\r\n\r\nconst MapboxGLMap = ({taxonKey,width,height}) => {\r\n\r\n  const RASTER_SOURCE_OPTIONS = {\r\n    \"type\": \"raster\",\r\n    \"tiles\": [\r\n        `https://api.gbif.org/v2/map/occurrence/density/0/0/0@2x.png?style=purpleYellow-noborder.poly&bin=hex&hexPerTile=70&taxonKey=${taxonKey}&srs=EPSG%3A4326`,\r\n        `https://api.gbif.org/v2/map/occurrence/density/0/1/0@2x.png?style=purpleYellow-noborder.poly&bin=hex&hexPerTile=70&taxonKey=${taxonKey}&srs=EPSG%3A4326`,\r\n    ],\r\n    \"tileSize\": 512\r\n  };\r\n    return (\r\n        <>\r\n        <Map\r\n        zoom={[0]}\r\n        // fitBounds={[[-47, 0], [-73, 45]]}\r\n        maxBounds={[[-79, 43], [-73, 45]]}\r\n        // center={[-47,90]}\r\n        style=\"mapbox://styles/mapbox/navigation-preview-night-v4\"\r\n        containerStyle={{\r\n          height: height,\r\n          width: width\r\n        }}\r\n      >\r\n          {/* <ZoomControl /> */}\r\n          <Source id=\"source_id\" tileJsonSource={RASTER_SOURCE_OPTIONS} />\r\n          <Layer type=\"raster\" id=\"layer_id\" sourceId=\"source_id\"/>\r\n      </Map>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default MapboxGLMap;","C:\\Users\\austi\\Desktop\\biosuite\\src\\hooks\\useFetchSpecies.js",["151"],"import { useState,useCallback } from 'react';\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport gbif from '../api/gbif'\r\n\r\nexport const fetchSpecies = async ({\r\n    id,\r\n    imagePaginationOptions,\r\n    occurrencePaginationOptions,\r\n    imagePage=0,\r\n    occurrencePage=0\r\n  }) => {\r\n\r\n  // Define offsets for pagination requests\r\n  const imageOffset = (imagePage*imagePaginationOptions.limit)    \r\n  const occurrenceOffset = (occurrencePage*occurrencePaginationOptions.limit)  \r\n\r\n  const resMetadata = await gbif.get(`species/${id}`)\r\n  const resOccurrenceImages = await gbif.get(`occurrence/search?media_type=stillImage&taxon_key=${id}&limit=${imagePaginationOptions.limit}&offset=${imageOffset}`)\r\n  const resSpeciesVernacularNames = await gbif.get(`species/${id}/vernacularNames`)\r\n  const resSpeciesSynonyms = await gbif.get(`/species/${id}/synonyms?limit=10`)\r\n  const resSpeciesChildren = await gbif.get(`/species/${id}/children?limit=100`)\r\n  const resSpeciesParent = await gbif.get(`/species/${id}/parents`)\r\n  const resOccurrences = await gbif.get(`occurrence/search?taxon_key=${id}&limit=${occurrencePaginationOptions.limit}&offset=${occurrenceOffset}`)\r\n\r\n  let data = {\r\n      \"metadata\": resMetadata.data,\r\n      \"occurrenceImages\": resOccurrenceImages.data,\r\n      \"speciesVernacularNames\": resSpeciesVernacularNames.data,\r\n      \"speciesSynonyms\": resSpeciesSynonyms.data,\r\n      \"speciesChildren\": resSpeciesChildren.data,\r\n      \"speciesParent\": resSpeciesParent.data,\r\n      \"occurrences\": resOccurrences.data\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport const useFetchSpecies = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [data, setData] = useState(null);\r\n\r\n  \r\n  const execute = async (options = {}) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const results = await fetchSpecies(options);\r\n      setData(results);\r\n      return results;\r\n    } catch (error) {\r\n      setError(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  console.log(data)\r\n  return {\r\n    isLoading,\r\n    data,\r\n    error,\r\n    execute: useCallback(execute, [])\r\n  };\r\n}","C:\\Users\\austi\\Desktop\\biosuite\\src\\hooks\\useFetchSearch.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Footer.js",["152","153","154","155"],"import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport { Container, Grid, Button, Paper } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"100%\",\r\n        height: '50px',\r\n        backgroundColor: theme.palette.green.main,\r\n        color: \"white\",\r\n        textAlign: \"center\"\r\n    },\r\n}));\r\n\r\nconst Footer = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Loading.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Pagination.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\ImageCard.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\PageHeader.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\NameCard.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\SectionHeader.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\ResultCard.js",["156","157"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\ClassificationCard.js",["158"],"import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   \r\n}));\r\n\r\nconst ClassificationCard = ({title,subtext,list}) => {\r\n    return (\r\n        <>\r\n            <Typography variant=\"h4\">{title}</Typography>\r\n            <Typography variant=\"body2\"><i>{subtext}</i></Typography>\r\n            <ul>\r\n                {list?.map((parent,i) => (\r\n                    <li key={i}><Typography variant=\"body1\">{parent.canonicalName}</Typography></li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nClassificationCard.propTypes = {\r\n    title: PropTypes.string,\r\n    subtext: PropTypes.string,\r\n    list: PropTypes.array,\r\n}\r\n\r\nexport default ClassificationCard\r\n",{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":5,"column":10,"nodeType":"165","messageId":"166","endLine":5,"endColumn":19},{"ruleId":"163","severity":1,"message":"167","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":17},{"ruleId":"168","severity":1,"message":"169","line":39,"column":9,"nodeType":"170","messageId":"171","endLine":39,"endColumn":15},{"ruleId":"163","severity":1,"message":"172","line":153,"column":11,"nodeType":"165","messageId":"166","endLine":153,"endColumn":18},{"ruleId":"163","severity":1,"message":"173","line":158,"column":9,"nodeType":"165","messageId":"166","endLine":158,"endColumn":14},{"ruleId":"174","severity":1,"message":"175","line":197,"column":50,"nodeType":"176","messageId":"177","endLine":197,"endColumn":52},{"ruleId":"178","severity":1,"message":"179","line":198,"column":48,"nodeType":"180","messageId":"171","endLine":198,"endColumn":50},{"ruleId":"178","severity":1,"message":"181","line":206,"column":39,"nodeType":"180","messageId":"171","endLine":206,"endColumn":41},{"ruleId":"178","severity":1,"message":"181","line":207,"column":52,"nodeType":"180","messageId":"171","endLine":207,"endColumn":54},{"ruleId":"178","severity":1,"message":"179","line":217,"column":59,"nodeType":"180","messageId":"171","endLine":217,"endColumn":61},{"ruleId":"182","severity":1,"message":"183","line":266,"column":10,"nodeType":"184","endLine":266,"endColumn":19,"suggestions":"185"},{"ruleId":"163","severity":1,"message":"167","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":17},{"ruleId":"163","severity":1,"message":"186","line":17,"column":8,"nodeType":"165","messageId":"166","endLine":17,"endColumn":19},{"ruleId":"163","severity":1,"message":"173","line":228,"column":9,"nodeType":"165","messageId":"166","endLine":228,"endColumn":14},{"ruleId":"163","severity":1,"message":"187","line":233,"column":12,"nodeType":"165","messageId":"166","endLine":233,"endColumn":30},{"ruleId":"163","severity":1,"message":"188","line":233,"column":32,"nodeType":"165","messageId":"166","endLine":233,"endColumn":53},{"ruleId":"163","severity":1,"message":"189","line":234,"column":11,"nodeType":"165","messageId":"166","endLine":234,"endColumn":29},{"ruleId":"163","severity":1,"message":"190","line":237,"column":12,"nodeType":"165","messageId":"166","endLine":237,"endColumn":32},{"ruleId":"163","severity":1,"message":"191","line":237,"column":34,"nodeType":"165","messageId":"166","endLine":237,"endColumn":57},{"ruleId":"163","severity":1,"message":"192","line":238,"column":11,"nodeType":"165","messageId":"166","endLine":238,"endColumn":31},{"ruleId":"163","severity":1,"message":"193","line":241,"column":12,"nodeType":"165","messageId":"166","endLine":241,"endColumn":30},{"ruleId":"163","severity":1,"message":"194","line":241,"column":32,"nodeType":"165","messageId":"166","endLine":241,"endColumn":53},{"ruleId":"163","severity":1,"message":"195","line":242,"column":11,"nodeType":"165","messageId":"166","endLine":242,"endColumn":29},{"ruleId":"182","severity":1,"message":"196","line":279,"column":12,"nodeType":"184","endLine":279,"endColumn":21,"suggestions":"197"},{"ruleId":"163","severity":1,"message":"167","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":17},{"ruleId":"163","severity":1,"message":"198","line":5,"column":26,"nodeType":"165","messageId":"166","endLine":5,"endColumn":32},{"ruleId":"163","severity":1,"message":"199","line":9,"column":15,"nodeType":"165","messageId":"166","endLine":9,"endColumn":21},{"ruleId":"163","severity":1,"message":"200","line":9,"column":22,"nodeType":"165","messageId":"166","endLine":9,"endColumn":27},{"ruleId":"163","severity":1,"message":"201","line":9,"column":28,"nodeType":"165","messageId":"166","endLine":9,"endColumn":35},{"ruleId":"163","severity":1,"message":"202","line":9,"column":36,"nodeType":"165","messageId":"166","endLine":9,"endColumn":40},{"ruleId":"163","severity":1,"message":"203","line":9,"column":41,"nodeType":"165","messageId":"166","endLine":9,"endColumn":50},{"ruleId":"163","severity":1,"message":"204","line":9,"column":51,"nodeType":"165","messageId":"166","endLine":9,"endColumn":62},{"ruleId":"163","severity":1,"message":"205","line":9,"column":63,"nodeType":"165","messageId":"166","endLine":9,"endColumn":74},{"ruleId":"163","severity":1,"message":"206","line":9,"column":75,"nodeType":"165","messageId":"166","endLine":9,"endColumn":80},{"ruleId":"163","severity":1,"message":"207","line":9,"column":81,"nodeType":"165","messageId":"166","endLine":9,"endColumn":90},{"ruleId":"163","severity":1,"message":"208","line":9,"column":91,"nodeType":"165","messageId":"166","endLine":9,"endColumn":100},{"ruleId":"163","severity":1,"message":"209","line":9,"column":101,"nodeType":"165","messageId":"166","endLine":9,"endColumn":115},{"ruleId":"163","severity":1,"message":"210","line":9,"column":116,"nodeType":"165","messageId":"166","endLine":9,"endColumn":125},{"ruleId":"163","severity":1,"message":"211","line":9,"column":126,"nodeType":"165","messageId":"166","endLine":9,"endColumn":134},{"ruleId":"163","severity":1,"message":"212","line":12,"column":8,"nodeType":"165","messageId":"166","endLine":12,"endColumn":15},{"ruleId":"213","severity":1,"message":"214","line":103,"column":22,"nodeType":"215","messageId":"171","endLine":103,"endColumn":24},{"ruleId":"213","severity":1,"message":"214","line":119,"column":18,"nodeType":"215","messageId":"171","endLine":119,"endColumn":20},{"ruleId":"163","severity":1,"message":"216","line":138,"column":11,"nodeType":"165","messageId":"166","endLine":138,"endColumn":13},{"ruleId":"163","severity":1,"message":"217","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":12},{"ruleId":"163","severity":1,"message":"218","line":2,"column":39,"nodeType":"165","messageId":"166","endLine":2,"endColumn":50},{"ruleId":"219","severity":1,"message":"220","line":28,"column":9,"nodeType":"221","endLine":28,"endColumn":67},{"ruleId":"163","severity":1,"message":"167","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":17},{"ruleId":"163","severity":1,"message":"164","line":3,"column":10,"nodeType":"165","messageId":"166","endLine":3,"endColumn":19},{"ruleId":"163","severity":1,"message":"222","line":3,"column":21,"nodeType":"165","messageId":"166","endLine":3,"endColumn":25},{"ruleId":"163","severity":1,"message":"199","line":3,"column":27,"nodeType":"165","messageId":"166","endLine":3,"endColumn":33},{"ruleId":"163","severity":1,"message":"200","line":3,"column":35,"nodeType":"165","messageId":"166","endLine":3,"endColumn":40},{"ruleId":"163","severity":1,"message":"198","line":5,"column":26,"nodeType":"165","messageId":"166","endLine":5,"endColumn":32},{"ruleId":"163","severity":1,"message":"186","line":11,"column":8,"nodeType":"165","messageId":"166","endLine":11,"endColumn":19},{"ruleId":"163","severity":1,"message":"223","line":9,"column":7,"nodeType":"165","messageId":"166","endLine":9,"endColumn":16},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","no-dupe-keys","Duplicate key 'border'.","ObjectExpression","unexpected","'classes' is assigned a value but never used.","'error' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterStrings', 'paginationOptions', and 'searchQuery'. Either include them or remove the dependency array.","ArrayExpression",["226"],"'MapboxGLMap' is defined but never used.","'childrenPagination' is assigned a value but never used.","'setChildrenPagination' is assigned a value but never used.","'childrenPageChange' is assigned a value but never used.","'vernacularPagination' is assigned a value but never used.","'setVernacularPagination' is assigned a value but never used.","'vernacularPageChange' is assigned a value but never used.","'synonymsPagination' is assigned a value but never used.","'setSynonymsPagination' is assigned a value but never used.","'synonymsPageChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'imagePaginationOptions', and 'occurrencePaginationOptions'. Either include them or remove the dependency array.",["227"],"'Router' is defined but never used.","'Button' is defined but never used.","'Paper' is defined but never used.","'Divider' is defined but never used.","'Card' is defined but never used.","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'CardActions' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Loading' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'id' is assigned a value but never used.","'clsx' is defined but never used.","'ZoomControl' is defined but never used.","react/style-prop-object","Style prop value must be an object","JSXAttribute","'Grid' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},"Update the dependencies array to be: [execute, filterStrings, paginationOptions, searchQuery]",{"range":"232","text":"233"},"Update the dependencies array to be: [execute, id, imagePaginationOptions, occurrencePaginationOptions]",{"range":"234","text":"235"},[9688,9697],"[execute, filterStrings, paginationOptions, searchQuery]",[13990,13999],"[execute, id, imagePaginationOptions, occurrencePaginationOptions]"]