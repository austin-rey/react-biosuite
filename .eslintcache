[{"C:\\Users\\austi\\Desktop\\biosuite\\src\\index.js":"1","C:\\Users\\austi\\Desktop\\biosuite\\src\\App.js":"2","C:\\Users\\austi\\Desktop\\biosuite\\src\\reportWebVitals.js":"3","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Navigation.js":"4","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Landing.js":"5","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Search.js":"6","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Species.js":"7","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Publisher.js":"8","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Occurrence.js":"9","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Dashboard.js":"10","C:\\Users\\austi\\Desktop\\biosuite\\src\\api\\gbif.js":"11","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\MapboxGLMap.js":"12","C:\\Users\\austi\\Desktop\\biosuite\\src\\hooks\\useFetchSpecies.js":"13","C:\\Users\\austi\\Desktop\\biosuite\\src\\hooks\\useFetchSearch.js":"14","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Footer.js":"15"},{"size":266,"mtime":1609876553483,"results":"16","hashOfConfig":"17"},{"size":2024,"mtime":1610647925435,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1606495291126,"results":"19","hashOfConfig":"17"},{"size":1776,"mtime":1610647935234,"results":"20","hashOfConfig":"17"},{"size":3474,"mtime":1610648617484,"results":"21","hashOfConfig":"17"},{"size":8734,"mtime":1610579450861,"results":"22","hashOfConfig":"17"},{"size":14411,"mtime":1610553843888,"results":"23","hashOfConfig":"17"},{"size":247,"mtime":1609963218080,"results":"24","hashOfConfig":"17"},{"size":251,"mtime":1609963197440,"results":"25","hashOfConfig":"17"},{"size":1359,"mtime":1610471942093,"results":"26","hashOfConfig":"17"},{"size":105,"mtime":1609966573981,"results":"27","hashOfConfig":"17"},{"size":1354,"mtime":1610579977329,"results":"28","hashOfConfig":"17"},{"size":823,"mtime":1610553760151,"results":"29","hashOfConfig":"17"},{"size":3197,"mtime":1610644856121,"results":"30","hashOfConfig":"17"},{"size":547,"mtime":1610647938047,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1od3epr",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"C:\\Users\\austi\\Desktop\\biosuite\\src\\index.js",[],["70","71"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\App.js",["72"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\reportWebVitals.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Navigation.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Landing.js",["73"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Search.js",["74","75","76","77","78"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport {useFetchSearch} from '../hooks/useFetchSearch'\r\n\r\nimport {BrowserRouter as Router,Link} from \"react-router-dom\";\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Grid,Button,Paper,TextField,FormGroup,FormControlLabel,Checkbox,Divider } from '@material-ui/core';\r\nimport {Pagination} from '@material-ui/lab'\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport Dashboard from '../components/Dashboard'\r\nimport MapboxGLMap from '../components/MapboxGLMap'\r\n\r\n// Component css styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    contentHeader: {\r\n        backgroundColor: theme.palette.brown.light,\r\n        padding: '20px 40px'\r\n    },\r\n    resultsHeader: {\r\n        padding: '10px 40px',\r\n    },\r\n    results: {\r\n        padding: '0px 40px',\r\n        flexGrow: 1,\r\n        height: '100%',\r\n    },\r\n    filterButton: {\r\n        backgroundColor: theme.palette.brown.dark,\r\n        color: '#fff'\r\n    },\r\n    card: {\r\n        marginBottom: '10px',\r\n        padding: '10px'\r\n    },\r\n    filterContainer: {\r\n        backgroundColor: '#fff',\r\n        border: '1px solid #F0E9E1',\r\n        borderRadius: '5px',\r\n        margin: '10px 0px',\r\n        padding: '10px'\r\n    },\r\n    textfield: {\r\n        width: '100%',\r\n        backgroundColor: '#fff',\r\n        border: '1px solid #F0E9E1',\r\n        borderRadius: '5px',\r\n    },\r\n    link: {\r\n        color: \"#fff\",\r\n        textDecoration: 'none'\r\n    }\r\n}));\r\n\r\nlet PaginationControlled = ({totalPages,currentPage,pageChange}) => {\r\n    return (\r\n        <Pagination count={totalPages} page={currentPage} variant=\"outlined\" shape=\"rounded\" onChange={pageChange}  />\r\n    )\r\n}\r\n\r\nPaginationControlled.defaultProps = {\r\n    limit: 20,\r\n    offset: 20,\r\n}\r\n\r\n// Left side of the dashboard\r\nconst Sidebar = ({facets,onChange,selectedFilters}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Grid item>\r\n                <h3>Filters</h3>\r\n                <TextField className={classes.textfield} id=\"outlined-basic\" label=\"Name, description, class\" variant=\"outlined\" />\r\n            </Grid>\r\n            {facets.map((facet,facetIndex) => (\r\n                <Grid key={facetIndex} item className={classes.filterContainer}>\r\n                    <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n                        <Grid item><h4>{facet.field.split('_').join(' ')}</h4></Grid>\r\n                        <Grid item><ArrowDropDownIcon/></Grid>\r\n                    </Grid>\r\n                    <Divider/>\r\n                    <FormGroup>\r\n                    {facet.counts.map((fieldOptions, fieldIndex) => (\r\n                        <FormControlLabel\r\n                            key={fieldIndex}\r\n                            onChange={onChange}\r\n                            control={<Checkbox checked={Object.values(selectedFilters[facetIndex])[1]?.includes(fieldOptions.name)}/>}\r\n                            label={fieldOptions.name.split('_').join(' ').toLowerCase()}\r\n                            value={fieldOptions.name}\r\n                            name={facet.field}\r\n                        />\r\n                    ))}\r\n                    </FormGroup>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nSidebar.propTypes = {\r\n    facets: PropTypes.array,\r\n    onChange: PropTypes.number,\r\n    selectedFilters: PropTypes.array,\r\n}\r\n\r\n// Right side of the dashboard\r\nconst MainContent = ({count,results,pageChange,currentPage,totalPages}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Grid item className={classes.contentHeader}>\r\n                <h1 className={classes.pageTitle}>Species</h1>\r\n                <p>Searching for species with the following filters:</p>\r\n            </Grid>\r\n            <Grid item className={classes.resultsHeader}>\r\n                <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"flex-start\">\r\n                    <Grid item><p>Results: {count}</p></Grid>\r\n                    <Grid item><Button variant=\"contained\" className={classes.filterButton} disableElevation>Sort</Button></Grid>\r\n                   \r\n                </Grid>\r\n            </Grid>\r\n            <Grid item className={classes.results}>\r\n                {results.map((result,i) => (\r\n              \r\n                    <Paper key={i} elevation={0} className={classes.card}>\r\n                        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"flex-start\">\r\n                            <Grid item>\r\n                                <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n                                    <Grid item>\r\n                                        <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n                                            <Grid item><h2>{result.scientificName}</h2></Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Grid container direction=\"row\" spacing={2}>\r\n                                            <Grid item>\r\n                                                <p>\r\n                                                    {Object.keys(result.higherClassificationMap).length !== 0 && Object.values(result.higherClassificationMap).map((item) => (\r\n                                                        ' / '+ item))}\r\n                                                </p>\r\n                                            </Grid>\r\n                                            <Grid item><p>{result.rank}</p></Grid>\r\n                                            <Grid item><p>{result.taxonomicStatus}</p></Grid>\r\n                                            <Grid item><p>{result.numOccurrences}</p></Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item><Button variant=\"contained\" className={classes.filterButton} disableElevation><Link className={classes.link} to={`/species/${result.key}`}>View this Species</Link></Button></Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                {console.log(result.key)}\r\n                                <MapboxGLMap taxonKey={result.key} width={512} height={168}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                ))}\r\n                <Paper elevation={0} className={classes.card}>\r\n                 <PaginationControlled currentPage={currentPage} totalPages={totalPages} pageChange={pageChange} />\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nMainContent.propTypes = {\r\n    count: PropTypes.number,\r\n    results: PropTypes.array,\r\n    offset: PropTypes.number,\r\n    limit: PropTypes.number,\r\n    pageChange: PropTypes.func\r\n}\r\n\r\nconst Search = ({type}) => {\r\n    const classes = useStyles();\r\n\r\n    const [selectedFilter, setSelectedFilter] = useState({});\r\n    let filterSelect = (e) => {\r\n        let group = e.target.name;\r\n        let selectedValue = e.target.value;\r\n        setSelectedFilter({[group]:selectedValue})\r\n    }\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const pageChange = (event, value) => {\r\n        setCurrentPage(value);\r\n    } \r\n\r\n    const { data, loading, error, filters, totalPages, densityMaps} = useFetchSearch(\r\n        selectedFilter,\r\n        currentPage,\r\n        []\r\n    );\r\n\r\n    return ((loading) \r\n        ? <h1>Loading</h1>\r\n        : <Dashboard \r\n            sidebar={\r\n                <Sidebar \r\n                    facets={data.facets} \r\n                    onChange={filterSelect}\r\n                    selectedFilters={filters}\r\n                />\r\n            } \r\n            mainContent={\r\n                <MainContent \r\n                    count={data.count} \r\n                    results={data.results} \r\n                    pageChange={pageChange} \r\n                    currentPage={currentPage}\r\n                    totalPages={totalPages}\r\n                    densityMaps={densityMaps}\r\n                />\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nSearch.propTypes = {\r\n    type: PropTypes.string\r\n}\r\n\r\nexport default Search\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Species.js",["79","80","81","82","83","84","85","86"],"import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {BrowserRouter as Router,Link,useParams} from \"react-router-dom\";\r\n\r\nimport Moment from 'react-moment';\r\n\r\nimport {useFetchSpecies} from '../hooks/useFetchSpecies'\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport { Grid,Button,Paper,Divider,Card,CardMedia,CardContent,CardActions } from '@material-ui/core';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\nimport Dashboard from '../components/Dashboard'\r\n\r\nimport MapboxGLMap from '../components/MapboxGLMap'\r\n// Component css styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    headerBG: {\r\n        backgroundColor: theme.palette.brown.light,\r\n    },\r\n    headerContainer: {\r\n        padding: '20px 40px',\r\n        maxWidth: '1600px'\r\n    },\r\n    headerButton: {\r\n        backgroundColor: theme.palette.brown.dark\r\n    },\r\n    viewMoreButton: {\r\n        backgroundColor: theme.palette.green.dark,\r\n        width: '100%'\r\n    },\r\n    resultsHeader: {\r\n        padding: '10px 40px',\r\n        borderBottom: '1px solid #efefef'\r\n    },\r\n    results: {\r\n        padding: '40px',\r\n        flexGrow: 1,\r\n        height: '100%',\r\n    },\r\n    section: {\r\n        marginBottom: '20px'\r\n    },\r\n    nameContainer: {\r\n        textAlign: 'center',\r\n        height: '100%'\r\n    },\r\n    card: {\r\n        width: 280,\r\n        boxShadow: 'none',\r\n        textAlign: 'center',\r\n        border: '1px solid #efefef',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        },\r\n    media: {\r\n        height: 200,\r\n    },\r\n    pagination: {\r\n        padding: '10px'\r\n    },\r\n    cardContainer: {\r\n        padding: '10px'\r\n    },\r\n    mapContainer: {\r\n        minWidth: '400px',\r\n        minHeight: '400px',\r\n    },\r\n    sidebarContainer: {\r\n        backgroundColor: '#fff',\r\n        border: '1px solid #F0E9E1',\r\n        borderRadius: '5px',\r\n        margin: '10px 0px',\r\n        padding: '10px'\r\n    },\r\n    link: {\r\n        color: \"#fff\",\r\n        textDecoration: 'none'\r\n    }\r\n}));\r\n\r\nconst ImageCard = ({image,title,created,link}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardMedia\r\n                className={classes.media}\r\n                image={image}\r\n                title={title}\r\n            />\r\n            <CardContent>\r\n                <h4>{title}</h4>\r\n                <span>Published: {\" \"} <Moment format=\"YYYY/MM/DD\">{created}</Moment>\r\n                    </span>\r\n                \r\n            </CardContent>\r\n            <CardActions>\r\n                <Button variant=\"contained\" className={classes.viewMoreButton} disableElevation>\r\n                    <Link className={classes.link} to={link}>view occurrence</Link>\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\nImageCard.propTypes = {\r\n    image: PropTypes.string,\r\n    title: PropTypes.string,\r\n    created: PropTypes.string,\r\n    link: PropTypes.string,\r\n\r\n}\r\n\r\nImageCard.defaultProps = {\r\n    image: 'https://via.placeholder.com/300x200.png',\r\n    title: 'Recorded Occurrence',\r\n    created: 'No date found',\r\n    link: '/'\r\n}\r\n\r\nconst PageHeader = ({name,rank,status,totalOccurrences,occurrenceLink}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item className={classes.headerBG}>\r\n            <Grid container direction=\"column\" justify=\"space-between\" alignItems=\"stretch\" className={classes.headerContainer}>\r\n                <Grid item>\r\n                    <h1 className={classes.pageTitle}>{name}</h1>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction=\"row\" spacing={2} justify=\"space-between\" alignItems=\"flex-start\">\r\n                        <Grid item>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item><h5>{rank}</h5></Grid>\r\n                                <Grid item><h5>{status}</h5></Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant=\"contained\" className={classes.headerButton} disableElevation><Link className={classes.link} to={occurrenceLink}>{totalOccurrences} occurrences found</Link></Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nPageHeader.propTypes = {\r\n    name: PropTypes.string,\r\n    rank: PropTypes.string,\r\n    status: PropTypes.string,\r\n    totalOccurrences: PropTypes.string,\r\n    occurrenceLink: PropTypes.string,\r\n}\r\n\r\nPageHeader.defaultProps = {\r\n    name: 'No Scientific Name Found',\r\n    rank: 'No rank found',\r\n    status: 'No status found',\r\n    totalOccurrences: '0',\r\n    occurrenceLink: '/',\r\n}\r\n\r\nconst NameContainer = ({leftCol,rightCol,leftLabel,rightLabel}) => {\r\n    const classes = useStyles();\r\n    console.log(leftCol);\r\n    return (\r\n        <Paper elevation={0}>\r\n            <Grid container direction=\"row\" alignItems=\"flex-start\" justify=\"space-around\" spacing={2}>\r\n                <Grid item className={classes.nameContainer}>\r\n                    <h5>{leftLabel}</h5>\r\n                    {leftCol?.map((item,i) => (\r\n                        <p key={i}>{item}</p>\r\n                    ))}\r\n                </Grid>\r\n                <Grid item className={classes.nameContainer}>\r\n                    <h5>{rightLabel}</h5>\r\n                    {rightCol?.map((item,i) => (\r\n                        <p key={i}>{item}</p>\r\n                    ))}\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nNameContainer.propTypes = {\r\n    leftCol: PropTypes.array,\r\n    rightCol: PropTypes.array,\r\n    leftLabel: PropTypes.string,\r\n    rightLabel: PropTypes.string\r\n}\r\n\r\nNameContainer.defaultProps = {\r\n\r\n}\r\n\r\n// Right side of the dashboard\r\nconst MainContent = ({metadata,images,datasets,vernacularNames,synonyms,children,parents}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <PageHeader name={metadata.scientificName} rank={metadata.rank} status={metadata.taxonomicStatus} totalOccurrences={datasets.count} occurrenceLink={'/'}/>\r\n            <Grid item className={classes.results}>\r\n                <Grid container direction=\"column\" wrap=\"nowrap\">\r\n                    <Grid item className={classes.section}>\r\n                    <h3>Published Images</h3>\r\n                    <p><i>Note: Click image for larger view.</i></p>\r\n                        <Paper elevation={0}>\r\n                            <Grid container direction=\"column\">\r\n                                <Grid item>\r\n                                    <Grid container direction=\"row\" spacing={2} className={classes.cardContainer}>\r\n                                        {images.results?.map((image,i) => (\r\n                                            <Grid item key={i}>\r\n                                                <ImageCard image={image.media[0].identifier} title={image.acceptedScientificName} created={image.media[0].created} link={'/'}/>\r\n                                            </Grid>\r\n                                        ))}\r\n                                       \r\n                                    </Grid>\r\n                                    <Divider/>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Pagination className={classes.pagination} count={10} variant=\"outlined\" shape=\"rounded\" /></Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={classes.section}>\r\n                        <h3>Geolocation Records</h3>\r\n                        <p><i>Occurrences of this species with recorded location data</i></p>\r\n                        <Paper elevation={0} className={classes.mapContainer}>\r\n                            {/* <ReactMap style=\"mapbox://styles/mapbox/streets-v8\"/> */}\r\n                            <MapboxGLMap/>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={classes.section}>\r\n                        <Grid container direction=\"row\" spacing={2} justify=\"flex-start\" wrap=\"nowrap\" alignItems=\"stretch\">\r\n                            <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>\r\n                                <h3>Vernacular Names</h3>\r\n                                <p><i>Common Names</i></p>  \r\n                                <NameContainer \r\n                                leftCol={vernacularNames?.map((item)=>{return item.vernacularName})} rightCol={vernacularNames?.map((item)=>{return item.source})} \r\n                                leftLabel={'Name'} \r\n                                rightLabel={'Source'}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>\r\n                                <h3>Synonyms</h3>\r\n                                <p><i>Related names</i></p>\r\n                                <NameContainer \r\n                                    leftCol={synonyms?.map((item)=>{return item.scientificName})} \r\n                                    rightCol={synonyms?.map((item)=>{return item.authorship})} \r\n                                    leftLabel={'Name'} \r\n                                    rightLabel={'Author'}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                <Grid item className={classes.section}>\r\n                    <p><i>Geolocation data mapping for recorded coordinates</i></p>\r\n                    <Paper elevation={0}>\r\n                        <Grid container>\r\n                            <p>Some citation</p>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Grid>\r\n    )\r\n}\r\n\r\nconst ClassificationItem = ({title,subtext,list}) => {\r\n    return (\r\n        <>\r\n            <h4>{title}</h4>\r\n            <span><i>{subtext}</i></span>\r\n            <ul>\r\n                {list?.map((parent,i) => (\r\n                    <li key={i}>{parent.canonicalName}</li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nClassificationItem.propTypes = {\r\n    title: PropTypes.string,\r\n    subtext: PropTypes.string,\r\n    list: PropTypes.array,\r\n\r\n}\r\n\r\nClassificationItem.defaultProps = {\r\n    title: 'No Scientific Name Found',\r\n    subtext: '',\r\n    list: ['No Results found'],\r\n}\r\n\r\n\r\nconst Sidebar = ({metadata,children,parents}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\r\n            <Grid item>\r\n                <Link to=\"/search/species/\">Back to Search</Link>\r\n            </Grid>\r\n            <Grid item>\r\n                <h3>Classification</h3>\r\n            </Grid>\r\n            <Grid item className={classes.sidebarContainer}>\r\n                <ClassificationItem title={'Higher Taxon'} subtext={'Click each to explore the children species.'} list={parents}/>\r\n            </Grid>\r\n            <Grid item className={classes.sidebarContainer}>\r\n                <ClassificationItem title={metadata.scientificName} subtext={metadata.rank} list={[]}/>\r\n            </Grid>\r\n            <Grid item className={classes.sidebarContainer}>\r\n                <ClassificationItem title={'Children'} subtext={'Click each to view more details.'} list={children.results}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst Species = props => {\r\n\r\n    let { id } = useParams();\r\n\r\n    const { \r\n        data: metadata, \r\n        loading:metadataLoading, \r\n        error:metadataError \r\n        } = useFetchSpecies(\r\n        `species/${id}`,\r\n        []\r\n    );\r\n\r\n    const { \r\n        data:occurrenceImages, \r\n        loading:occurrenceImagesLoading, \r\n        error:occurrenceImagesError \r\n        } = useFetchSpecies(\r\n        `occurrence/search?limit=8&media_type=stillImage&taxon_key=${id}`,\r\n        []\r\n    );\r\n\r\n    const { \r\n        data:occurrenceDatasets, \r\n        loading:occurrenceDatasetsLoading, \r\n        error:occurrenceDatasetsError \r\n        } = useFetchSpecies(\r\n        `/occurrence/search?limit=8&taxon_key=${id}`,\r\n        []\r\n    );\r\n\r\n    const { \r\n        data:speciesVernacularNames, \r\n        loading:speciesVernacularNamesLoading, \r\n        error:speciesVernacularNamesError \r\n        } = useFetchSpecies(\r\n        `species/${id}/vernacularNames`,\r\n        []\r\n    );\r\n\r\n    const { \r\n        data:speciesSynonyms, \r\n        loading:speciesSynonymsLoading, \r\n        error:speciesSynonymsError \r\n        } = useFetchSpecies(\r\n        `/species/${id}/synonyms?limit=10`,\r\n        []\r\n    );\r\n\r\n    const { \r\n        data:speciesChildren, \r\n        loading:speciesChildrenLoading, \r\n        error:speciesChildrenError \r\n        } = useFetchSpecies(\r\n        `/species/${id}/children?limit=100`,\r\n        []\r\n    );\r\n\r\n    const { \r\n        data:speciesParent, \r\n        loading:speciesParentLoading, \r\n        error:speciesParentError \r\n        } = useFetchSpecies(\r\n        `/species/${id}/parents`,\r\n        []\r\n    );\r\n\r\n    return ((metadataLoading && occurrenceImagesLoading && occurrenceDatasetsLoading && speciesVernacularNamesLoading && speciesSynonymsLoading && speciesChildrenLoading && speciesParentLoading) \r\n        ? <h1>Loading</h1>\r\n        : <Dashboard \r\n            sidebar={\r\n                <Sidebar \r\n                    metadata={metadata}\r\n                    children={speciesChildren}\r\n                    parents={speciesParent}\r\n                />\r\n            } \r\n            mainContent={\r\n               <MainContent \r\n                    metadata={metadata}\r\n                    images={occurrenceImages} \r\n                    datasets={occurrenceDatasets} \r\n                    vernacularNames={speciesVernacularNames.results} \r\n                    synonyms={speciesSynonyms.results}\r\n                    children={speciesChildren}\r\n                    parents={speciesParent}\r\n               />\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default Species\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Publisher.js",["87"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Publisher = props => {\r\n    return (\r\n        <div>\r\n            <h1>Publisher Page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nPublisher.propTypes = {\r\n\r\n}\r\n\r\nexport default Publisher\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\pages\\Occurrence.js",["88"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Occurrence = props => {\r\n    return (\r\n        <div>\r\n            <h1>Occurrence Page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nOccurrence.propTypes = {\r\n\r\n}\r\n\r\nexport default Occurrence\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Dashboard.js",["89"],"import React from 'react';\r\n\r\nimport clsx from 'clsx';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Drawer,CssBaseline} from '@material-ui/core';\r\n\r\nconst drawerWidth = 300;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex'\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    backgroundColor: theme.palette.brown.main,\r\n    padding: theme.spacing(2),\r\n    position: 'relative',\r\n    whiteSpace: 'wrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  content: {\r\n    overflow: 'hideen',\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.grey.light\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n}));\r\n\r\nconst Dashboard = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        {props.sidebar}\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n      \r\n           {props.mainContent}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\austi\\Desktop\\biosuite\\src\\api\\gbif.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\MapboxGLMap.js",["90","91"],"import * as React from 'react';\r\nimport ReactMapboxGl, { Layer, Source,ZoomControl} from \"react-mapbox-gl\";\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst Map = ReactMapboxGl({\r\n    accessToken: process.env.REACT_APP_MAPBOX,\r\n    maxZoom : 1,\r\n    minZoom : 0\r\n  });\r\n\r\nconst MapboxGLMap = ({taxonKey,width,height}) => {\r\n\r\n  const RASTER_SOURCE_OPTIONS = {\r\n    \"type\": \"raster\",\r\n    \"tiles\": [\r\n        `https://api.gbif.org/v2/map/occurrence/density/0/0/0@2x.png?style=purpleYellow-noborder.poly&bin=hex&hexPerTile=70&taxonKey=${taxonKey}&srs=EPSG%3A4326`,\r\n        `https://api.gbif.org/v2/map/occurrence/density/0/1/0@2x.png?style=purpleYellow-noborder.poly&bin=hex&hexPerTile=70&taxonKey=${taxonKey}&srs=EPSG%3A4326`,\r\n    ],\r\n    \"tileSize\": 512\r\n  };\r\n    return (\r\n        <>\r\n        <Map\r\n        zoom={[0]}\r\n        // fitBounds={[[-47, 0], [-73, 45]]}\r\n        maxBounds={[[-79, 43], [-73, 45]]}\r\n        // center={[-47,90]}\r\n        style=\"mapbox://styles/mapbox/navigation-preview-night-v4\"\r\n        containerStyle={{\r\n          height: height,\r\n          width: width\r\n        }}\r\n      >\r\n          {/* <ZoomControl /> */}\r\n          <Source id=\"source_id\" tileJsonSource={RASTER_SOURCE_OPTIONS} />\r\n          <Layer type=\"raster\" id=\"layer_id\" sourceId=\"source_id\"/>\r\n      </Map>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default MapboxGLMap;","C:\\Users\\austi\\Desktop\\biosuite\\src\\hooks\\useFetchSpecies.js",[],"C:\\Users\\austi\\Desktop\\biosuite\\src\\hooks\\useFetchSearch.js",["92","93","94","95"],"C:\\Users\\austi\\Desktop\\biosuite\\src\\components\\Footer.js",["96","97","98","99"],"import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport { Container, Grid, Button, Paper } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"100%\",\r\n        height: '50px',\r\n        backgroundColor: theme.palette.green.main,\r\n        color: \"white\",\r\n        textAlign: \"center\"\r\n    },\r\n}));\r\n\r\nconst Footer = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":5,"column":10,"nodeType":"106","messageId":"107","endLine":5,"endColumn":19},{"ruleId":"104","severity":1,"message":"108","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":17},{"ruleId":"104","severity":1,"message":"109","line":1,"column":26,"nodeType":"106","messageId":"107","endLine":1,"endColumn":35},{"ruleId":"104","severity":1,"message":"110","line":5,"column":26,"nodeType":"106","messageId":"107","endLine":5,"endColumn":32},{"ruleId":"104","severity":1,"message":"111","line":12,"column":8,"nodeType":"106","messageId":"107","endLine":12,"endColumn":23},{"ruleId":"104","severity":1,"message":"112","line":178,"column":11,"nodeType":"106","messageId":"107","endLine":178,"endColumn":18},{"ruleId":"104","severity":1,"message":"113","line":192,"column":28,"nodeType":"106","messageId":"107","endLine":192,"endColumn":33},{"ruleId":"104","severity":1,"message":"110","line":5,"column":26,"nodeType":"106","messageId":"107","endLine":5,"endColumn":32},{"ruleId":"104","severity":1,"message":"114","line":334,"column":15,"nodeType":"106","messageId":"107","endLine":334,"endColumn":28},{"ruleId":"104","severity":1,"message":"115","line":343,"column":15,"nodeType":"106","messageId":"107","endLine":343,"endColumn":36},{"ruleId":"104","severity":1,"message":"116","line":352,"column":15,"nodeType":"106","messageId":"107","endLine":352,"endColumn":38},{"ruleId":"104","severity":1,"message":"117","line":361,"column":15,"nodeType":"106","messageId":"107","endLine":361,"endColumn":42},{"ruleId":"104","severity":1,"message":"118","line":370,"column":15,"nodeType":"106","messageId":"107","endLine":370,"endColumn":35},{"ruleId":"104","severity":1,"message":"119","line":379,"column":15,"nodeType":"106","messageId":"107","endLine":379,"endColumn":35},{"ruleId":"104","severity":1,"message":"120","line":388,"column":15,"nodeType":"106","messageId":"107","endLine":388,"endColumn":33},{"ruleId":"104","severity":1,"message":"108","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":17},{"ruleId":"104","severity":1,"message":"108","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":17},{"ruleId":"104","severity":1,"message":"121","line":3,"column":8,"nodeType":"106","messageId":"107","endLine":3,"endColumn":12},{"ruleId":"104","severity":1,"message":"122","line":2,"column":39,"nodeType":"106","messageId":"107","endLine":2,"endColumn":50},{"ruleId":"123","severity":1,"message":"124","line":28,"column":9,"nodeType":"125","endLine":28,"endColumn":67},{"ruleId":"104","severity":1,"message":"126","line":12,"column":20,"nodeType":"106","messageId":"107","endLine":12,"endColumn":31},{"ruleId":"127","severity":1,"message":"128","line":42,"column":43,"nodeType":"129","messageId":"130","endLine":42,"endColumn":45},{"ruleId":"127","severity":1,"message":"128","line":43,"column":56,"nodeType":"129","messageId":"130","endLine":43,"endColumn":58},{"ruleId":"131","severity":1,"message":"132","line":79,"column":6,"nodeType":"133","endLine":79,"endColumn":34,"suggestions":"134"},{"ruleId":"104","severity":1,"message":"105","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":19},{"ruleId":"104","severity":1,"message":"135","line":3,"column":21,"nodeType":"106","messageId":"107","endLine":3,"endColumn":25},{"ruleId":"104","severity":1,"message":"136","line":3,"column":27,"nodeType":"106","messageId":"107","endLine":3,"endColumn":33},{"ruleId":"104","severity":1,"message":"137","line":3,"column":35,"nodeType":"106","messageId":"107","endLine":3,"endColumn":40},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","'useEffect' is defined but never used.","'Router' is defined but never used.","'ArrowDropUpIcon' is defined but never used.","'classes' is assigned a value but never used.","'error' is assigned a value but never used.","'metadataError' is assigned a value but never used.","'occurrenceImagesError' is assigned a value but never used.","'occurrenceDatasetsError' is assigned a value but never used.","'speciesVernacularNamesError' is assigned a value but never used.","'speciesSynonymsError' is assigned a value but never used.","'speciesChildrenError' is assigned a value but never used.","'speciesParentError' is assigned a value but never used.","'clsx' is defined but never used.","'ZoomControl' is defined but never used.","react/style-prop-object","Style prop value must be an object","JSXAttribute","'setEndpoint' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'endpoint' and 'filters'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setData' needs the current value of 'endpoint'.","ArrayExpression",["140"],"'Grid' is defined but never used.","'Button' is defined but never used.","'Paper' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},"Update the dependencies array to be: [selectedFilter, currentPage, endpoint, filters]",{"range":"143","text":"144"},[3114,3142],"[selectedFilter, currentPage, endpoint, filters]"]